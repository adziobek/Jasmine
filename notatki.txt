* Jak można zmienić konfigurację Jasmine?
Można to zrobić dodając plik .travis.yml do projektu.

* Jak sprawdzić ile czasu zajeło wykonanie wszystkich testow?
window.jsApiReporter.executionTime() w konsoli

* Jakie javascripty są potrzebne i do czego?
jasmine.js      - główna funkcjonalność
jasmine-html.js - tworzy htmla z podsumowaniem testów
jasmine.css     - style do formatowania htmla
boot.js         - odpowiada za załadowanie i uruchomienie testów
console.js      - zawiera ConsoleReporter, który może logować na konsolę wyniki testów

Domyślnie za pokazywanie wyników testów jest odpowiedzialny HTMLReporter.
Reportera którego chcemy używać ustawia się w pliku boot.js
  env.addReporter(jasmineInterface.jsApiReporter);
  env.addReporter(htmlReporter);

* Co oznaczają pojęcia suite test, spec, describe, it?
unit test - test jednostkowy, testuje kawałek kodu
spec - test jednostkowy, skrót od specification, testuje techniczną implementacje
test suite - zestaw testów testujących daną funckjonalność
describe = test suite - zestaw testów w Jasmine
it = spec = unit test - pojedyńczy test w Jasmine

* Czym się różnią testy focus od zwykłych fdescribe vs. describe, fit vs. it
Jeśli w projekcie są jakieś testy(fit) lub zestawy testów(fdescribe) focused
to są one odpalane, a pozostałe testy nie.

this.execute = function(runnablesToRun) {
  if(!runnablesToRun) {
    if (focusedRunnables.length) {
      runnablesToRun = focusedRunnables; // odpalane testy focused
    } else {
      runnablesToRun = [topSuite.id]; // brak focused i odpalane pozostałe
    }
  }

* Co się będzie działo gdy zagnieździmy blok describe?
Dla każdego spec z zagnieżdzonego bloku zostanie uruchomiona metoda beforeEach, afterEach zarówno
z describe w którym się znajduje jak i describe w którym jest zagnieżdzony.

* Co znaczy że test jest pending?
Oznacza to że nie zostanie uruchomiony ale będzie widoczny w rezultatach.
Można to osiągnąć używająć:
xdescribe - wszystkie spec z danego xdescribe będą pending
xit - pojedyńczy test jest pending

* Co zrobić gdy sekcja given i then w testach się powtarza?
Wyłączyć ją do metody beforeEach()

* Czy body methody która zostaje zastąpiona spy jest wykonywane?
Nie, ciało metody nie jest wykonywane. Dzięki spy można sprawdzić czy metoda jest wywoływana, ile razy jest
wywoływana i z jakim parametrami.
Aby ciało metody zostało wykonane należy spy założyć na metodę:
spyOn(foo, 'getBar').and.callThrough();

* Czy  .and.returnValue(745); powoduje wykonanie się ciała metody?
Nie, powoduje jedynie zwrócenie fake wyniku.

* Jakie jest domyśle działanie Spy?
Domyślnie Spy jest wywoływany ale nic nie robi, nic nie zwraca. Zawdzięcza to stub.

/**
 * Tell the spy to do nothing when invoked. This is the default.
 * @name Spy#and#stub
 * @function
 */
this.stub = function(fn) {
  plan = function() {};
  return getSpy();
};

Wywołanie and.stub() powoduje powrót domyślnego działania spy na metodzie(spy nie będzie nic zwracał, wywoływał ciało metody ectr)

* Jakie mamy rodzaje funkcji do przetestowania?
- funkcje bez efektów ubocznych - ich rezultat zależy wyłącznie od przekazanych im parametrów, argumentów
np. String.toLowerCase
- funckje z efektami ubocznymi - ich rezulatat zależy od czego zewnętrzengo co może się zmieniać, np. czasu,
zapytania do bazy danych
np. Database.save()

* Kiedy używamy test doubles: Spy, Stub, Mock?
- wtedy gdy funkcja ma side effecty
- gdy sprawia problemy podczas testów, np. długo się wykonuje

* Kiedy używamy Spy?
Spy dostarcza informacji o wywołaniu fukcji, czy była wywołana, ile razy była wywołana, z jakimi argumentami,
co zwróciła.


* Kiedy używamy Stub?
Stub zastępuje testowaną fukcję. Może być użyty by zastąpić problematyczny kod, np.
wywołanie metody zapisujacej coś w bazie danych:
sinon.stub(Database, 'save')

* Kiedy używamy Mock?
Wtedy gdy chcemy przetestować wiele asercji i nie pisać wiele expectów.
 database.expects('save').once().withArgs(expectedUser);
 database.verify();



